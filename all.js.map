{"version":3,"sources":["render.js","retrograde.js","test.js","transform.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["\nimport transform from \"transform\";\nimport {Orbit, OrbitMesh, Observer} from \"retrograde\";\nimport {mat4, vec3} from \"lib/gl-matrix.js\";\nimport T from \"lib/three.js\";\n\nclass GridBox extends T.LineSegments {\n    constructor(width, height, depth, divisions) {\n        super(undefined, new T.LineBasicMaterial({color: 0xFFFFFF}));\n\n        let vert = this.geometry.vertices;\n\n        let stepX = width/divisions,\n            stepY = height/divisions,\n            stepZ = depth/divisions,\n\n            w2 = width / 2,\n            h2 = height / 2,\n            d2 = depth / 2;\n\n        for (let x = 0; x <= divisions; ++x) {\n            vert.push(V3(stepX * x - w2, h2, -d2));\n            vert.push(V3(stepX * x - w2, -h2, -d2));\n\n            vert.push(V3(stepX * x - w2, h2, d2));\n            vert.push(V3(stepX * x - w2, -h2, d2));\n\n            vert.push(V3(stepX * x - w2, h2, -d2));\n            vert.push(V3(stepX * x - w2, h2, d2));\n\n            vert.push(V3(stepX * x - w2, -h2, -d2));\n            vert.push(V3(stepX * x - w2, -h2, d2));\n        }\n\n        for (let y = 0; y < divisions; ++y) {\n            vert.push(V3(w2, stepY * y - h2, -d2));\n            vert.push(V3(-w2, stepY * y - h2, -d2));\n\n            vert.push(V3(w2, stepY * y - h2, d2));\n            vert.push(V3(-w2, stepY * y - h2, d2));\n\n            vert.push(V3(w2, stepY * y - h2, -d2));\n            vert.push(V3(w2, stepY * y - h2, d2));\n\n            vert.push(V3(-w2, stepY * y - h2, -d2));\n            vert.push(V3(-w2, stepY * y - h2, d2));\n        }\n\n        for (let z = 0; z < divisions; ++z) {\n            vert.push(V3(w2, h2, stepZ * z - d2));\n            vert.push(V3(-w2, h2, stepZ * z - d2));\n\n            vert.push(V3(w2, -h2, stepZ * z - d2));\n            vert.push(V3(-w2, -h2, stepZ * z - d2));\n\n            vert.push(V3(w2, -h2, stepZ * z - d2));\n            vert.push(V3(w2, h2, stepZ * z - d2));\n\n            vert.push(V3(-w2, -h2, stepZ * z - d2));\n            vert.push(V3(-w2, h2, stepZ * z - d2));\n        }\n\n        this.geometry.verticesNeedUpdate = true;\n    }\n};\n\nconst WIDTH = 500;\nconst HEIGHT = 500;\n\nlet scene = new T.Scene(),\n    camera = new T.PerspectiveCamera(\n        Math.PI / 4 * 360,\n        WIDTH/HEIGHT,\n        0.1,\n        100000\n    ),\n    renderer = new T.WebGLRenderer();\n\nrenderer.setSize(WIDTH, HEIGHT);\n\ndocument.body.appendChild(renderer.domElement);\n\nlet orbit = new Orbit(225, 0, 0),\n\n    material = new T.LineBasicMaterial({color: 0xFFFFFF}),\n\n    orbitMesh = new OrbitMesh(orbit, material, 100),\n\n    gridMesh = new GridBox(500, 500, 500, 10);\n\nscene.add(orbitMesh);\nscene.add(gridMesh);\n\nlet theta = Math.PI / 16,\n    phi = 0,\n    speed = 0.5 * Math.PI / 1000,\n    start,\n    eye = [500, 0, 0],\n    up = new T.Vector3(0, 0, -1),\n    planet = new Observer(50, Math.PI / 4, 0, -Math.PI / 5);\n\nfunction render(time_stamp=0) {\n    requestAnimationFrame(render);\n\n    if (!start) {\n        start = time_stamp;\n    }\n\n    let delta_t = time_stamp - start;\n    start = time_stamp;\n\n    orbit = new Orbit(225, theta, phi);\n    orbitMesh.updateOrbit(orbit);\n\n    let observationPoint = planet.point(time_stamp / 1000);\n\n    camera.position.copy(V3(observationPoint));\n    //camera.position.copy(V3(eye));\n    camera.up.copy(up);\n    camera.lookAt(V3(orbit.nearest(observationPoint)));\n    // camera.lookAt(V3([0,0,0]));\n\n    phi -= speed * delta_t;\n\n    renderer.render(scene, camera);\n}\n\nrequestAnimationFrame(render);\n\n\nfunction V3(a, b, c) {\n    if (arguments.length == 3)\n        return new T.Vector3(a, b, c);\n    return new T.Vector3(a[0], a[1], a[2]);\n}\n\n\n\n// let ortho = transform.ortho(-350, 350, 350, -350, 350, -350),\n\n//     perspective = mat4.perspective(\n//         mat4.create(),\n//         Math.PI / 4, // vertical field of view (radians)\n//         1, // aspect ratio\n//         -100, // near bound\n//         100 // far bound\n//     ),\n\n//     screen = transform.screenMatrix(500, 500), // transforms NDC to screen coordinates\n\n//     view = mat4.multiply(mat4.create(), screen, perspective),\n\n//     canvas = document.createElement(\"canvas\"),\n\n//     ctx = canvas.getContext(\"2d\");\n\n// document.body.appendChild(canvas);\n// canvas.width = 500;\n// canvas.height = 500;\n\n// let theta = Math.PI / 16,\n//     phi = 0,\n//     speed = 0.5 * Math.PI / 1000,\n//     index = 0,\n//     start = null,\n//     camera = mat4.create(),\n//     observationPoint = [50, 0, -100],\n//     eye = [500, 0, 0],\n//     up = [0, 0, 1],\n//     planet = new Observer(50, Math.PI / 4, 0, -Math.PI / 4);\n\n// let render = function(time_stamp=0) {\n\n//     if (!start) {\n//         start = time_stamp;\n//     }\n\n//     let o = new Orbit(225, theta, phi), // make orbit\n\n//         p = o.plot(200), // plot points (really just a circle)\n\n//         delta_t = time_stamp - start;\n\n//     start = time_stamp;\n\n//     //    let model = transform.orientationMatrix(theta, phi);\n//     let model = mat4.create();\n\n//     eye = planet.point(time_stamp);\n// //    let nearest =\n//     camera = mat4.lookAt(camera, eye, o.nearest(eye), up);\n\n//     let mvp = mat4.multiply(mat4.create(), camera, model);\n//     mvp = mat4.multiply(mvp, view, mvp);\n\n//     ctx.fillStyle = \"#000\";\n//     ctx.fillRect(0,0,500,500);\n\n//     ctx.strokeStyle = \"#DDD\";\n//     ctx.lineWidth = 1;\n\n//     renderLines(ctx, mvp, subset(p, 0, 199));\n\n//     renderLines(ctx, mvp, lineBetween(observationPoint, o.nearest(observationPoint)));\n\n//     phi -= speed * delta_t;\n\n//     index = (index + 2) % p.length;\n\n//     window.requestAnimationFrame(render);\n// };\n\n// render();\n\n// function subset(arr, index, samples) {\n//     if (samples >= arr.length)\n//         return arr;\n\n//     let sub = arr.slice(index);\n\n//     if (sub.length < samples)\n//         return sub.concat(arr.slice(0, samples - sub.length));\n//     else\n//         return sub.slice(0, samples);\n// }\n\n// function pointsToPath(points) {\n//     let path = new Path2D();\n//     path.moveTo(points[0][0], points[0][1]);\n\n//     for (let i = 1; i < points.length; ++i) {\n//         path.lineTo(points[i][0], points[i][1]);\n//     }\n\n//     return path;\n// }\n\n// function renderLines(ctx, mvp, points) {\n//     let transformedPoints = transform.arrayMultiply(\n//         mvp,\n//         points\n//     ),\n//         path = pointsToPath(transformedPoints);\n\n//     ctx.stroke(path);\n// }\n\n// function lineBetween(start, end) {\n//     return [start, end];\n// }\n","\nimport {vec3, mat4} from \"lib/gl-matrix.js\";\n\nimport {orientationMatrix} from \"transform\";\n\nimport THREE from \"lib/three.js\";\n\nexport class Orbit {\n    constructor(radius, elevation, azimuth) {\n        this._radius = radius;\n        this._elevation = elevation;\n        this._azimuth = azimuth;\n\n        this._orientation = orientationMatrix(\n            elevation, azimuth\n        );\n    }\n\n    point(t) {\n        let angle = angleReduce(t * 2 * Math.PI),\n\n            p = vec3.fromValues(\n                this._radius * Math.cos(angle),\n                this._radius * Math.sin(angle),\n                0\n            );\n\n        return vec3.transformMat4(p, p, this._orientation);\n    }\n\n    plot(resolution=100) {\n        let a = [];\n\n        for (let i = 0; i < resolution; ++i) {\n            a.push(this.point(i / resolution));\n        }\n\n        return a;\n    }\n\n    /* Returns vector that points from source point to nearest point on orbit */\n    nearest(source) {\n        let t = this._orientation,\n\n            t_inverse = mat4.invert(mat4.create(), t),\n\n            // Transform source vector into orbit's local space\n            source_prime;\n\n        if (vec3.squaredLength(source) != 0) {\n            source_prime = vec3.transformMat4(vec3.create(), source, t_inverse);\n        } else {\n            source_prime = [1, 0, 0];\n        }\n\n        // Project source_prime onto x-y place\n        let projection = vec3.fromValues(source_prime[0], source_prime[1], 0),\n\n            // Nearest point is simply at distance r from origin in direction of projection\n            p_prime = vec3.scale(projection, vec3.normalize(projection, projection), this._radius);\n\n        // Return vector projected back into orbit's transformed space\n        return vec3.transformMat4(p_prime, p_prime, t);\n    }\n};\n\nexport class OrbitMesh extends THREE.Line {\n    constructor(orbit, material, resolution=20) {\n        super(undefined, material);\n\n        this._resolution = resolution;\n\n        this.updateOrbit(orbit);\n    }\n\n    updateOrbit(orbit) {\n        let points = orbit.plot(this._resolution),\n\n            p0 = points[0];\n\n        this.geometry.vertices = points.map((p) => new THREE.Vector3(p[0], p[1], p[2]));\n\n        this.geometry.vertices.push(new THREE.Vector3(p0[0], p0[1], p0[2]));\n\n        this.geometry.verticesNeedUpdate = true;\n    }\n};\n\n/**\n * @class Observer\n * Represents the position of an observer on a spherical rotating body centered at 0,0,0\n *\n * @param {number} radius Radius of spherical body\n * @param {number} elevation Angle between line through observation point to center of body and plane through equator\n * @param {number} azimuth Angle between line through observation point and center and x-z plane\n * @param {number} speed Angular speed in radians/second\n*/\nexport class Observer {\n    constructor(radius, elevation, azimuth, speed) {\n        this._radius = radius;\n        this._elevation = elevation;\n        this._azimuth = azimuth;\n        this._speed = speed;\n    }\n\n    /**\n     * Returns location of observation point at time t\n     *\n     * @param {number} t Time in seconds\n     */\n    point(t) {\n        let r_xy = this._radius * Math.cos(this._elevation),\n\n            p = vec3.fromValues(\n                r_xy * Math.cos(this._azimuth),\n                r_xy * Math.sin(this._azimuth),\n                this._radius * Math.sin(this._elevation)\n            );\n\n        return vec3.rotateZ(p, p, [0,0,0], this._speed * t);\n    }\n};\n\nfunction angleReduce(angle) {\n    let PI2 = Math.PI * 2;\n    while (angle > PI2) {\n        angle -= PI2;\n    }\n    while (angle < 0) {\n        angle += PI2;\n    }\n    return angle;\n}\n","\nimport transform from \"transform\";\nimport {Orbit, Observer} from \"retrograde\";\nimport {mat4, vec3} from \"lib/gl-matrix.js\";\nimport THREE from \"lib/three.js\";\n\nlet ortho = transform.ortho(-350, 350, 350, -350, 350, -350),\n\n    perspective = mat4.perspective(\n        mat4.create(),\n        Math.PI / 4, // vertical field of view (radians)\n        1, // aspect ratio\n        -100, // near bound\n        100 // far bound\n    ),\n\n    screen = transform.screenMatrix(500, 500), // transforms NDC to screen coordinates\n\n    view = mat4.multiply(mat4.create(), screen, perspective),\n\n    canvas = document.createElement(\"canvas\"),\n\n    ctx = canvas.getContext(\"2d\");\n\ndocument.body.appendChild(canvas);\ncanvas.width = 500;\ncanvas.height = 500;\n\nlet theta = Math.PI / 16,\n    phi = 0,\n    speed = 0.5 * Math.PI / 1000,\n    index = 0,\n    start = null,\n    camera = mat4.create(),\n    observationPoint = [50, 0, -100],\n    eye = [500, 0, 0],\n    up = [0, 0, 1],\n    planet = new Observer(50, Math.PI / 4, 0, -Math.PI / 4);\n\nlet render = function(time_stamp=0) {\n\n    if (!start) {\n        start = time_stamp;\n    }\n\n    let o = new Orbit(225, theta, phi), // make orbit\n\n        p = o.plot(200), // plot points (really just a circle)\n\n        delta_t = time_stamp - start;\n\n    start = time_stamp;\n\n    //    let model = transform.orientationMatrix(theta, phi);\n    let model = mat4.create();\n\n    eye = planet.point(time_stamp);\n//    let nearest =\n    camera = mat4.lookAt(camera, eye, o.nearest(eye), up);\n\n    let mvp = mat4.multiply(mat4.create(), camera, model);\n    mvp = mat4.multiply(mvp, view, mvp);\n\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0,0,500,500);\n\n    ctx.strokeStyle = \"#DDD\";\n    ctx.lineWidth = 1;\n\n    renderLines(ctx, mvp, subset(p, 0, 199));\n\n    renderLines(ctx, mvp, lineBetween(observationPoint, o.nearest(observationPoint)));\n\n    phi -= speed * delta_t;\n\n    index = (index + 2) % p.length;\n\n    window.requestAnimationFrame(render);\n};\n\nrender();\n\nfunction subset(arr, index, samples) {\n    if (samples >= arr.length)\n        return arr;\n\n    let sub = arr.slice(index);\n\n    if (sub.length < samples)\n        return sub.concat(arr.slice(0, samples - sub.length));\n    else\n        return sub.slice(0, samples);\n}\n\nfunction pointsToPath(points) {\n    let path = new Path2D();\n    path.moveTo(points[0][0], points[0][1]);\n\n    for (let i = 1; i < points.length; ++i) {\n        path.lineTo(points[i][0], points[i][1]);\n    }\n\n    return path;\n}\n\nfunction renderLines(ctx, mvp, points) {\n    let transformedPoints = transform.arrayMultiply(\n        mvp,\n        points\n    ),\n        path = pointsToPath(transformedPoints);\n\n    ctx.stroke(path);\n}\n\nfunction lineBetween(start, end) {\n    return [start, end];\n}\n","\nimport {vec3, mat4} from \"lib/gl-matrix.js\";\n\n/*\n Matrix that rotates x-y plane to be normal with spherical unit vector\n where theta = elevation, phi = azimuth\n and 0 <= theta < pi / 2, 0 <= phi < 2 pi\n */\nexport function orientationMatrix(elevation, azimuth) {\n    let theta = elevation,\n        phi = azimuth,\n        M = Math,\n        sin_theta = M.sin(theta),\n        cos_theta = M.cos(theta),\n        sin_phi = M.sin(phi),\n        cos_phi = M.cos(phi);\n\n    return mat4.clone(\n        [cos_phi * cos_theta, sin_phi * cos_theta, -sin_theta, 0,\n                    -sin_phi,             cos_phi,          0, 0,\n         cos_phi * sin_theta, sin_phi * sin_theta,  cos_theta, 0,\n                           0,                   0,          0, 1]\n    );\n}\n\n/*\n Orthographic projection matrix\n Returns 4x4 matrix\n __                                                                                        __\n |                                                                                          |\n | 2 / (right - left)          0                 0         -(right + left) / (right - left) |\n |                                                                                          |\n |       0            2 / (top - bottom)         0         -(top + bottom) / (top - bottom) |\n |                                                                                          |\n |       0                     0         -2 / (far - near)    (far + near) / (far - near)   |\n |                                                                                          |\n |       0                     0                 0                         1                |\n |                                                                                          |\n --                                                                                        --\n */\nexport function ortho(left, right, top, bottom, near, far) {\n    return mat4.ortho(mat4.create(), left, right, bottom, top, near, far);\n}\n\nexport function screenMatrix(width, height) {\n    let m = mat4.create();\n\n    m[0] = width / 2;\n    m[5] = height / 2;\n    m[12] = width / 2;\n    m[13] = height / 2;\n\n    return m;\n}\n\nexport function arrayMultiply(matrix, arr) {\n    return arr.map((a) => vec3.transformMat4(vec3.create(), a, matrix));\n}\n\nexport function translate(x, y, z) {\n    return mat4.fromTranslation(mat4.create(), [x, y, z]);\n}\n\nexport default {\n    orientationMatrix: orientationMatrix,\n    ortho: ortho,\n    arrayMultiply: arrayMultiply,\n    translate: translate,\n    screenMatrix: screenMatrix\n};\n"],"sourceRoot":"/source/"}